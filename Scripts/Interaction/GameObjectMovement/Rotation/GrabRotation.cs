using UnityEngine;

using System.Collections;

public class GrabRotation : MonoBehaviour
{
    private UnityEngine.XR.Interaction.Toolkit.Interactors.XRDirectInteractor interactor;
    private bool isGrabbing = false;
    private Transform grabbedObject;
    
    // Vitesse initiale de rotation sur l'axe Y
    private Vector3 rotationSpeedY = new Vector3(0f, 90f, 0f);  
    // Vitesse de rotation sur l'axe Z apr√®s la rotation sur Y
    private Vector3 rotationSpeedZ = new Vector3(0f, 0f, 90f);

    public string targetTag = "Interactable";  // Assurez-vous que vos objets interactifs ont ce tag
    private bool isControllerRotating = false;  // Flag pour savoir si on doit ignorer la rotation du contr√¥leur
    private bool isRotatingY = true;  // D√©termine si on fait la rotation sur l'axe Y ou Z
    private float grabDelay = 60f;  // Dur√©e en secondes pendant laquelle les mouvements du contr√¥leur sont bloqu√©s
    private float rotationTimer = 0f;  // Timer pour suivre combien de temps la rotation a dur√©

    void Start()
    {
        interactor = GetComponent<UnityEngine.XR.Interaction.Toolkit.Interactors.XRDirectInteractor>();
        if (interactor == null)
        {
            Debug.LogError("‚ùå XRDirectInteractor non trouv√© sur " + gameObject.name);
        }
    }

    // Lorsque la main entre en collision avec un objet
    private void OnTriggerEnter(Collider other)
    {
        // V√©rifier si l'objet poss√®de un XRGrabInteractable
        UnityEngine.XR.Interaction.Toolkit.Interactables.XRGrabInteractable interactable = other.GetComponent<UnityEngine.XR.Interaction.Toolkit.Interactables.XRGrabInteractable>();

        if (interactable != null && other.CompareTag(targetTag))  // Assurez-vous que les objets √† attraper ont ce tag
        {
            Debug.Log("üëã Objet d√©tect√© : " + other.name);
            StartGrab(interactable);
        }
        else
        {
            Debug.Log("‚ùå L'objet n'a pas un XRGrabInteractable ou le tag ne correspond pas.");
        }
    }

    // Lorsque la main quitte l'objet
    private void OnTriggerExit(Collider other)
    {
        UnityEngine.XR.Interaction.Toolkit.Interactables.XRGrabInteractable interactable = other.GetComponent<UnityEngine.XR.Interaction.Toolkit.Interactables.XRGrabInteractable>();

        if (interactable != null)
        {
            Debug.Log("üõë Objet rel√¢ch√© : " + other.name);
            EndGrab();
        }
    }

    // D√©marrer l'interaction avec l'objet
    private void StartGrab(UnityEngine.XR.Interaction.Toolkit.Interactables.XRGrabInteractable interactable)
    {
        // Cast l'interactable en IXRSelectInteractable avant de d√©marrer l'interaction manuelle
        UnityEngine.XR.Interaction.Toolkit.Interactables.IXRSelectInteractable selectInteractable = interactable as UnityEngine.XR.Interaction.Toolkit.Interactables.IXRSelectInteractable;
        if (selectInteractable != null)
        {
            interactor.StartManualInteraction(selectInteractable);
            isGrabbing = true;
            grabbedObject = interactable.transform; // R√©f√©rence √† l'objet attrap√©
            isControllerRotating = true;  // Bloque les mouvements du contr√¥leur

            // Lancer la coroutine pour bloquer les mouvements du contr√¥leur pendant 15 secondes
            StartCoroutine(DisableControllerRotationForDelay(grabDelay));
        }
        else
        {
            Debug.LogError("‚ùå Impossible de caster l'objet en IXRSelectInteractable");
        }
    }

    // Arr√™ter l'interaction avec l'objet
    private void EndGrab()
    {
        if (grabbedObject != null)
        {
            interactor.EndManualInteraction();
            isGrabbing = false;
            grabbedObject = null;
            isControllerRotating = false;  // R√©active les mouvements du contr√¥leur
        }
    }

    // Coroutine qui d√©sactive les mouvements du contr√¥leur pendant un certain temps
    private IEnumerator DisableControllerRotationForDelay(float delay)
    {
        // Attendre pendant la dur√©e du d√©lai
        yield return new WaitForSeconds(delay);

        // Apr√®s le d√©lai, r√©activer les mouvements du contr√¥leur
        isControllerRotating = false;
        Debug.Log("‚è±Ô∏è Rotation contr√¥leur r√©activ√©e apr√®s " + delay + " secondes");

        // Rel√¢cher automatiquement l'objet apr√®s la rotation
        EndGrab();
        Debug.Log("üîì L'objet a √©t√© rel√¢ch√© apr√®s 15 secondes.");
    }

    // Appliquer une rotation sur l'objet
    void Update()
    {
        if (isGrabbing && grabbedObject != null && isControllerRotating)
        {
            rotationTimer += Time.deltaTime;

            if (isRotatingY)
            {
                // Appliquer une rotation sur l'axe Y
                grabbedObject.Rotate(rotationSpeedY * Time.deltaTime);
                if (rotationTimer >= grabDelay)
                {
                    // Apr√®s la rotation sur l'axe Y, passer √† la rotation sur l'axe Z
                    isRotatingY = false;
                    rotationTimer = 0f;  // R√©initialiser le timer pour la rotation sur Z
                    Debug.Log("‚úÖ Rotation sur l'axe Y termin√©e. Passage √† la rotation sur l'axe Z.");
                }
            }
            else
            {
                // Appliquer une rotation sur l'axe Z
                grabbedObject.Rotate(rotationSpeedZ * Time.deltaTime);
            }

            Debug.Log("Rotating");
        }
    }
}
